')
install.packages('quantmod')
library(quantmod)
sp500<-new.env()
startDate = as.Date('1960-01-04')
startDate = as.Date('1960-01-04')
endDate   = as.Date('2017-11-26')
getSymbols('^GSPC',env=sp500, src='yahoo', from=startDate,
to=endDate,auto.assign=T)
startDate = as.Date('1960-01-04')
endDate   = as.Date('2017-11-26')
getSymbols('^GSPC',env=sp500, src='yahoo', from=startDate,
to=endDate,auto.assign=T)
getDividends('^GSPC', env=sp500, src='yahoo', from=startDate,
to=endDate,auto.assign=T)
getSplits('^GSPC', env=sp500, src='yahoo',from=startDate,to=endDate,auto.assign=T)
head(sp500$GSPC)
tail(sp500$GSPC)
class(sp500$GSPC)
sp_prc<-sp500$GSPC[,6]
class(sp_prc)    # xts, zoo      'zoo' stands for Z's ordered observations
plot(sp_prc)
ret_sp500_daily<-(sp_prc-lag(sp_prc))/lag(sp_prc)
ret_sp500_daily<-diff(sp_prc)/lag(sp_prc)
plot(ret_sp500_daily)
mean(ret_sp500_daily,na.rm=T) * 252     # annualized return
spy<-new.env()
getSymbols('SPY',env=spy, src='yahoo', from=as.Date('1993-01-29'),
to=as.Date('2017-11-26'))
getDividends('SPY',env=spy, src='yahoo', from=as.Date('1993-01-29'),
to=as.Date('2017-11-26'),auto.assign=T)
getSplits('SPY',env=spy, src='yahoo', from=as.Date('1993-01-29'),
to=as.Date('2017-11-26'),auto.assign=T)
head(spy$SPY)
spy_prc <- spy$SPY[,6]
ret_spy_daily <- diff(spy_prc)/lag(spy_prc)
ret_spy_div   <- spy$SPY.div/spy_prc
mean(ret_spy_daily, na.rm=T) * 252    # ~ 10.74%/year
mean(ret_spy_div,na.rm=T) * 4
sp_avg20 = rollmean(sp_prc, 20, align='center')
plot(sp_avg20)
plot(sp_avg20)
sp_avg100 = rollmean(sp_prc, 100, align='center')
plot(sp_avg100)
ret_sp500_daily<-ret_sp500_daily[2:length(ret_sp500_daily)]  # removing the first nan element
ret_sp500_avg20 = rollmean(ret_sp500_daily, 20, align='center')
plot(ret_sp500_avg20)
ret_sp500_avg100 = rollmean(ret_sp500_daily, 100, align='center')
plot(ret_sp500_avg100)       # The 100 trading days moving average is smoother than the 20 days version
qqnorm(ret_sp500_daily)
qqline(ret_sp500_daily)
N <- 100
sigma <- 0.1
epsilon = rnorm(N, 0, sigma)
X <- numeric(N)
theta <- 0.2
X[1]  <- 0.0
for (i in 2:N) {
X[i] <- theta * X[i-1] + epsilon[i]
}
plot(X,type='l')
N <- 100
sigma <- 0.1
epsilon = rnorm(N, 0, sigma)
Y <- numeric(N)
phi <- 0.6
Y[1]  <- 0.0
for (i in 2:N) {
Y[i] <- epsilon[i] + phi * epsilon[i-1]
}
plot(Y,type='l')
install.packages('tseries')
library(tseries)
adf.test(sp_prc)
install.packages('kernlab')
write.csv('df', 'spam.csv')
getwd()
data(spam)
data(spam)
library(kernlab)
df = data(spam)
data(spam)
spam
df
df = as.data.frame(data(spam))
df
df
data(spam)
spam
df = spam
write.csv(df, 'spam.csv')
df
df
View(df)
View(df)
View(df)
before_co_ugids = read.csv("desktop/data/before_co_ugids.csv", sep = ",")
before_co_ugids = read.csv("desktop/data/before_co_ugids.csv", sep = ",")
View(before_co_ugids)
before_co_ugids = read.csv("desktop/data/before_co_ugids.csv", sep = ",")
test_co_ugids = read.csv("desktop/data/test_co_ugids.csv", sep = ",")
after_co_ugids = read.csv("desktop/data/after_co_ugids.csv", sep = ",")
before_co = read.csv("desktop/data/before_co.csv", sep = ",")
test_co = read.csv("desktop/data/test_co.csv", sep = ",")
after_co = read.csv("desktop/data/after_co.csv", sep = ",")
before_wl_ugids = read.csv("desktop/data/before_wl_ugids.csv", sep = ",")
test_wl_ugids = read.csv("desktop/data/test_wl_ugids.csv", sep = ",")
after_wl_ugids = read.csv("desktop/data/after_wl_ugids.csv", sep = ",")
before_wl = read.csv("desktop/data/before_wl.csv", sep = ",")
test_wl = read.csv("desktop/data/test_wl.csv", sep = ",")
after_wl = read.csv("desktop/data/after_wl.csv", sep = ",")
View(after_co_ugids)
View(after_wl)
View(after_wl_ugids)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_wl)
View(after_co)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(before_co_ugids)
View(before_co)
View(before_wl)
View(after_wl)
View(after_co)
View(after_co_ugids)
View(after_co_ugids)
View(after_co)
View(after_wl)
View(after_wl_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_wl)
View(after_wl_ugids)
View(after_co)
View(after_co_ugids)
View(after_wl)
View(after_co_ugids)
View(after_co)
View(after_co_ugids)
View(after_co)
View(after_wl)
View(test_co)
View(after_co_ugids)
View(after_co)
View(before_co)
View(before_wl)
View(before_co)
View(before_wl)
View(before_co)
View(before_wl)
View(before_co)
View(before_wl)
View(before_co)
View(before_co_ugids)
View(before_co_ugids)
View(before_co)
before_wl <- read.csv("desktop/data/before_wl.csv")
before_co <- read.csv("desktop/data/before_co.csv")
test_co <- read.csv("desktop/data/test_co.csv")
test_wl <- read.csv("desktop/data/test_wl.csv")
after_co <- read.csv("desktop/data/after_co.csv")
after_wl <- read.csv("desktop/data/after_wl.csv")
rm(ls = ())
rm(ls = ())
rm(ls)
rm(ls())
before_wl <- read.csv("desktop/data/before_wl.csv")
before_co <- read.csv("desktop/data/before_co.csv")
test_co <- read.csv("desktop/data/test_co.csv")
test_wl <- read.csv("desktop/data/test_wl.csv")
after_co <- read.csv("desktop/data/after_co.csv")
after_wl <- read.csv("desktop/data/after_wl.csv")
View(after_co)
View(after_wl)
View(after_co)
clean.co<-function(x,time){
tab<-x%>%
group_by(theugid)%>%
mutate(reg_times = sum(reg_success))%>%
mutate(Status=ifelse(reg_times>0,"Create","Lost"))
tab$Phase=time
col=if(time!="Test"){
c("thedevice","firstpage","Status" ,"Phase")
}else{
c("thedevice","Status","firstpage","Phase","themodule")
}
tab=tab[,col]
return(tab)
}
clean.wl<-function(x,time){
# check the status
x$number.of.l <- str_count(x$login_or_create, "L")
x$number.of.c <- str_count(x$login_or_create, "C")
x$number.of.user <-x$eventcount-str_count(x$isloggedin_r, "by-session")
x$creat_s<-ifelse(x$number.of.c>0 & x$number.of.user>0,1,0)
x$creat_f<-ifelse(x$number.of.c>0 & x$number.of.user==0,1,0)
x$return_s <- ifelse(x$number.of.c==0 & x$number.of.l>0 & x$number.of.user>0,1,0)
x$return_f <- ifelse(x$number.of.c==0 & x$number.of.l>0 & x$number.of.user==0,1,0)
# add one column to indicate the status
tbl<-x%>%
group_by(date=as.Date(X_time), theugid)%>%
mutate(cs_times = sum(creat_s),
cf_times = sum(creat_f),
rs_times = sum(return_s),
rf_times = sum(return_f))%>%
mutate(Status=ifelse(cs_times>0,
"Create_S",
ifelse(cf_times>0,
"Create_F",
ifelse(rs_times>0,
"Return_S",
ifelse(rf_times>0,
"Return_F",
"Lost"
)))))
tbl$Phase=time
col=if(time!="Test"){
c("thedevice","firstpage","Status" ,"Phase")
}else{
c("thedevice","Status","firstpage","Phase","themodule")
}
tbl=tbl[,col]
return(tbl)
}
clean.wl.bi<-function(x,time){
tbl=clean.wl(x,time)
tbl=tbl%>%
filter(Status %in% c("Create_S","Create_F"))
return(tbl)
}
clean.combine<-function(x,time1,y,time2,z,time3,function1){
DT1=function1(x,time1)
DT2=function1(y,time2)
DT3=function1(z,time3)
Final=as.data.frame(bind_rows(DT1,DT2,DT3))
Final=as.data.frame(sapply(Final,as.factor)) # sapply won't work?????
Final$Status<- relevel(Final$Status,
ref = ifelse(as.character(substitute(function1))=="clean.co",
"Create",
"Create_S"))
Final$Phase <- relevel(Final$Phase, ref = "Test")
Final$themodule <- relevel(Final$themodule, ref = "F")
return(Final)
}
co_final=clean.combine(before_co,"Before",test_co,"Test",after_co,"After",clean.co)
wl_final=clean.combine(before_wl,"Before",test_wl,"Test",after_wl,"After",clean.wl)
wl_final_bi=clean.combine(before_wl,"Before",test_wl,"Test",after_wl,"After",clean.wl.bi)
install.packages("stringr")
library(dplyr)
library(stringr)#
library(dplyr)
library(stringr)# to count N, L and C
# Data import ------------------------------------------------------------------
before_wl <- read.csv("desktop/data/before_wl.csv")
before_co <- read.csv("desktop/data/before_co.csv")
test_co <- read.csv("desktop/data/test_co.csv")
test_wl <- read.csv("desktop/data/test_wl.csv")
after_co <- read.csv("desktop/data/after_co.csv")
after_wl <- read.csv("desktop/data/after_wl.csv")
# Data Cleaning ----------------------------------------------------------------
clean.co<-function(x,time){
tab<-x%>%
group_by(theugid)%>%
mutate(reg_times = sum(reg_success))%>%
mutate(Status=ifelse(reg_times>0,"Create","Lost"))
tab$Phase=time
col=if(time!="Test"){
c("thedevice","firstpage","Status" ,"Phase")
}else{
c("thedevice","Status","firstpage","Phase","themodule")
}
tab=tab[,col]
return(tab)
}
clean.wl<-function(x,time){
# check the status
x$number.of.l <- str_count(x$login_or_create, "L")
x$number.of.c <- str_count(x$login_or_create, "C")
x$number.of.user <-x$eventcount-str_count(x$isloggedin_r, "by-session")
x$creat_s<-ifelse(x$number.of.c>0 & x$number.of.user>0,1,0)
x$creat_f<-ifelse(x$number.of.c>0 & x$number.of.user==0,1,0)
x$return_s <- ifelse(x$number.of.c==0 & x$number.of.l>0 & x$number.of.user>0,1,0)
x$return_f <- ifelse(x$number.of.c==0 & x$number.of.l>0 & x$number.of.user==0,1,0)
# add one column to indicate the status
tbl<-x%>%
group_by(date=as.Date(X_time), theugid)%>%
mutate(cs_times = sum(creat_s),
cf_times = sum(creat_f),
rs_times = sum(return_s),
rf_times = sum(return_f))%>%
mutate(Status=ifelse(cs_times>0,
"Create_S",
ifelse(cf_times>0,
"Create_F",
ifelse(rs_times>0,
"Return_S",
ifelse(rf_times>0,
"Return_F",
"Lost"
)))))
tbl$Phase=time
col=if(time!="Test"){
c("thedevice","firstpage","Status" ,"Phase")
}else{
c("thedevice","Status","firstpage","Phase","themodule")
}
tbl=tbl[,col]
return(tbl)
}
clean.wl.bi<-function(x,time){
tbl=clean.wl(x,time)
tbl=tbl%>%
filter(Status %in% c("Create_S","Create_F"))
return(tbl)
}
clean.combine<-function(x,time1,y,time2,z,time3,function1){
DT1=function1(x,time1)
DT2=function1(y,time2)
DT3=function1(z,time3)
Final=as.data.frame(bind_rows(DT1,DT2,DT3))
Final=as.data.frame(sapply(Final,as.factor)) # sapply won't work?????
Final$Status<- relevel(Final$Status,
ref = ifelse(as.character(substitute(function1))=="clean.co",
"Create",
"Create_S"))
Final$Phase <- relevel(Final$Phase, ref = "Test")
Final$themodule <- relevel(Final$themodule, ref = "F")
return(Final)
}
co_final=clean.combine(before_co,"Before",test_co,"Test",after_co,"After",clean.co)
wl_final=clean.combine(before_wl,"Before",test_wl,"Test",after_wl,"After",clean.wl)
wl_final_bi=clean.combine(before_wl,"Before",test_wl,"Test",after_wl,"After",clean.wl.bi)
View(co_final)
View(test_co)
View(test_wl)
View(wl_final)
View(wl_final_bi)
View(wl_final_bi)
View(wl_final_bi)
View(wl_final)
str(wl_final)
View(wl_final_bi)
View(wl_final)
View(wl_final_bi)
str(wl_final_bi)
View(wl_final)
View(co_final)
View(wl_final)
View(co_final)
str(co_final)
all_final = as.data.frame(bind_rows(co_final, wl_final))
str(all_final)
all_final %>% group.by(Phase, Status) %<% summarise(., "count" = n())
all_final %>% group.by(Phase, Status) %>% summarise(., "count" = n())
all_final %>% group_by(Phase, Status) %>% summarise(., "count" = n())
library(dplyr)
library(dplyr)
library(dplyr)
library(ggplot2)
### Comparing creation probability after checking out
co_final %>% head()
co_final %>%
mutate(Create=(Status=='Create'), social=(Phase=='Test'))%>%
group_by(social) %>%
summarise(Ratio = sum(Create/n()))
### Comparing creation probability in editing wish list (Including failure)
wl_final %>%
mutate(Create=(Status%in% c('Create_S', 'Create_F')), social=(Phase=='Test'))%>%
group_by(social) %>%
summarise(Ratio = sum(Create/n()))
### Comparing creation probability in editing wish list (Only success)
wl_final %>%
mutate(Create=(Status=='Create_S'), social=(Phase=='Test'))%>%
group_by(social) %>%
summarise(Ratio = sum(Create/n()))
### Exclude the one with account already
wl_final %>%
filter(! Status %in% c('Return_S', 'Return_F')) %>%
mutate(Create=(Status%in% c('Create_S', 'Create_F')), social=(Phase=='Test'))%>%
group_by(social) %>%
summarise(Ratio = sum(Create/n()))
### Further analysis
co_by_date <- function(){
Reduce(rbind,list(
before_co %>%
group_by(date=as.Date(X_time), theugid) %>%
summarise(create=sum(reg_success)>0) %>%
summarise(social=F, ratio = sum(create)/n()),
test_co %>%
group_by(date=as.Date(X_time), theugid) %>%
summarise(create=sum(reg_success)>0) %>%
summarise(social=T, ratio = sum(create)/n()),
after_co %>%
group_by(date=as.Date(X_time), theugid) %>%
summarise(create=sum(reg_success)>0) %>%
summarise(social=F, ratio = sum(create)/n()))
)}
co_by_date() %>%
ggplot()+
geom_bar(aes(x=weekdays(date),
y=ratio,
fill=social),
stat='identity', position='dodge')
### Chisq test
chisq.test(table(co_final$Phase, co_final$Status))
chi_co <- co_final %>% mutate(Test=(Phase=='Test')) %>%
(function(x) {chisq.test(table(x$Test, x$Status))})
chi_co$residuals
chi_wl <- wl_final %>% mutate(Test=(Phase=='Test'), Create =(Status %in% c('Create_S', 'Create_F'))) %>%
(function(x) {chisq.test(table(x$Test, x$Create))})
chi_wl$residuals
### GLM method:
mod_co = glm(Status ~ Phase, data=co_final, family = binomial())
summary(mod_co)
mod_wl = wl_final %>%
mutate(Test=(Phase=='Test'), Create =(Status %in% c('Create_S', 'Create_F'))) %>%
(function(x) {glm(Create~Test, data=x, family=binomial())})
library(PASWR)
load(titanic3)
titanic3
?titanic3
str(titanic3)
shiny::runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
pwd
pwd()
getwd
getwd()
setwd("./NYDSA/12-Week_bootcamp/Projects/Project_1/data")
setwd("./Documents/NYDSA/12-Week_bootcamp/Projects/Project_1/data")
runApp('~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
runApp('~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
getwd()
runApp('~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
getwd
getwd()
runApp('~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
runApp('~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
runApp('~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
runApp('~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
runApp('~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
runApp('~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
getwd
getwd()
setwd("../")
getwd
getwed()
getwd()
setwd("./app")
getwd()
runApp()
setwd("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app")
runApp()
setwd("~")
getwd()
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app')
setwd("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app")
runApp()
runApp()
runApp()
runApp()
getwd()
list.files
list.files()
runApp()
runApp('app')
getwd()
setwd("../")
getwd()
runApp('app')
runApp('./app')
getwd()
setwd("./app")
getwd()()
getwd()
app
runApp()
setwd("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app")
runApp()
setwd("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1/app")
runApp()
runApp()
runApp()
runApp()
