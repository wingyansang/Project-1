vec = c()
vec[1]  = ("Win")
vec
vec[1] = 'Win'
vec
craps2 = function(n) {
vec = c()
i = 1
for (i in 1:n) {
x   <-   sum(sample(1:6,   2,   replace=T))
if (x == 7 | x == 12) {
vec[i] = "Win"} else if (x == 2 | x == 3 | x == 12){
vec[i] = "Loss"} else {
est_pt = x
x   <-   sum(sample(1:6,   2,   replace=T))
while ((x != 7) | (x != est_pt)){
if (x == est_pt) {
vec[i] = "Win"} else if (x == 7) {
vec[i] = "Loss"} else {
x   <-   sum(sample(1:6,   2,   replace=T))
}
}
}
}
i = i + 1
}
craps2 = function(n) {
vec = c()
i = 1
for (i in 1:n) {
x   <-   sum(sample(1:6,   2,   replace=T))
if (x == 7 | x == 12) {
vec[i] = "Win"} else if (x == 2 | x == 3 | x == 12){
vec[i] = "Loss"} else {
est_pt = x
x   <-   sum(sample(1:6,   2,   replace=T))
while ((x != 7) | (x != est_pt)){
if (x == est_pt) {
vec[i] = "Win"} else if (x == 7) {
vec[i] = "Loss"} else {
x   <-   sum(sample(1:6,   2,   replace=T))
}
}
}
}
i = i + 1
return (vec)
}
craps(1000)
craps2(1000)
craps(10)
craps2(10)
craps2 = function(n) {
vec = c()
i = 1
for (i in 1:n) {
vec[i] = craps()
i = i + 1}
return (vec)
}
craps(10)
craps2(10)
craps2(1000)
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
sum('Win'== craps2(1000))
craps2(50)
system.time({craps(1000)})
system.time({craps2(1000)})
system.time({craps2(100000)})
system.time({craps2(10000)})
system.time({craps2(100000)})
system.time({craps2(1000000)})
Fibo = c()
Fibo[1] <- 1
Fibo[2] <- 2
while (Fibo[length(Fibo)] < 4e6) {
Fibo[length(Fibo)+1] <- Fibo[length(Fibo)] + Fibo[length(Fibo)-1]
}
Fibo <- Fibo[1:length(Fibo)-1] # last one is over 4e6
Fibo
cat("Sum of even numbers: ", sum(Fibo[Fibo %% 2 ==0]))
A <- matrix(10:21, nrow = 4, ncol = 3, byrow = T)
A
v <- c(1,1,1)
v
matvec.prod <- function (mat, vec) {
if (dim(mat)[2] != length(vec)) {
cat("dimension error")
return(NA)
}
prod <- c()
for (i in 1:dim(mat)[1]) {
prod[i] <- 0
for (j in 1:dim(mat)[2]) {
prod[i] <- prod[i] + mat[i, j]*vec[j]
}
}
return(prod)
}
matvec.prod(A, v)
# MAD
x <- c(3,4,5,2,6,7,8,9)
MAD <- function(x) { median(abs(x - median(x))) }
MAD(x)
MAD(sample(1:100, 1000, replace = T))
Names <- "John Andrew Thomas"
names_split <- strsplit(Names, " ", split = " ")
names_split <- names_split[[1]] # need to unpack list
paste(names_split, "@gmail.com", sep="", collapse=', ')
# "aa" "ba" "ca" "da" "ea" "ab" "bb" "cb" "db" "eb" "ac" "bc" "cc" "dc" "ec" "ad" "bd" "cd" "dd" "ed" "ae" "be" "ce" "de" "ee"
paste0(c("a","b", "c", "d", "e"), rep(c("a","b", "c", "d", "e"), c(5, 5, 5, 5, 5)))
# or
paste0(letters[1:5], rep(letters[1:5], rep(5,5)))
compare <- function(str1, str2) {
if (nchar(str1)==nchar(str2)) {
cat("Equal Length")
} else {
cat("Not Equal Length")
}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
x <- sum(sample(1:6,2))
cat("\nFirst throw = ", x)
if (x %in% c(7, 11)) {
cat("\nyou win")
} else if (x %in% c(2, 3, 12)) {
cat("\nyou lose")
} else {
while (T) {
y <- sum(sample(1:6,2))
cat("\nNext Throw = ", y)
if (y==x) {
cat("\nyou win")
break
}
if (y==7) {
cat("\nyou lose")
break
}
}
}
Fibo = c()
Fibo[1] <- 1
Fibo[2] <- 2
while (Fibo[length(Fibo)] < 4e6) {
Fibo[length(Fibo)+1] <- Fibo[length(Fibo)] + Fibo[length(Fibo)-1]
}
Fibo <- Fibo[1:length(Fibo)-1] # last one is over 4e6
Fibo
cat("Sum of even numbers: ", sum(Fibo[Fibo %% 2 ==0]))
A <- matrix(10:21, nrow = 4, ncol = 3, byrow = T)
A
v <- c(1,1,1)
v
matvec.prod <- function (mat, vec) {
if (dim(mat)[2] != length(vec)) {
cat("dimension error")
return(NA)
}
prod <- c()
for (i in 1:dim(mat)[1]) {
prod[i] <- 0
for (j in 1:dim(mat)[2]) {
prod[i] <- prod[i] + mat[i, j]*vec[j]
}
}
return(prod)
}
matvec.prod(A, v)
# MAD
x <- c(3,4,5,2,6,7,8,9)
MAD <- function(x) { median(abs(x - median(x))) }
MAD(x)
MAD(sample(1:100, 1000, replace = T))
Names <- "John Andrew Thomas"
names_split <- strsplit(Names, " ", split = " ")
names_split <- names_split[[1]] # need to unpack list
paste(names_split, "@gmail.com", sep="", collapse=', ')
# "aa" "ba" "ca" "da" "ea" "ab" "bb" "cb" "db" "eb" "ac" "bc" "cc" "dc" "ec" "ad" "bd" "cd" "dd" "ed" "ae" "be" "ce" "de" "ee"
paste0(c("a","b", "c", "d", "e"), rep(c("a","b", "c", "d", "e"), c(5, 5, 5, 5, 5)))
# or
paste0(letters[1:5], rep(letters[1:5], rep(5,5)))
compare <- function(str1, str2) {
if (nchar(str1)==nchar(str2)) {
cat("Equal Length")
} else {
cat("Not Equal Length")
}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
x <- sum(sample(1:6,2))
cat("\nFirst throw = ", x)
if (x %in% c(7, 11)) {
cat("\nyou win")
} else if (x %in% c(2, 3, 12)) {
cat("\nyou lose")
} else {
while (T) {
y <- sum(sample(1:6,2))
cat("\nNext Throw = ", y)
if (y==x) {
cat("\nyou win")
break
}
if (y==7) {
cat("\nyou lose")
break
}
}
}
Fibo = c()
Fibo[1] <- 1
Fibo[2] <- 2
while (Fibo[length(Fibo)] < 4e6) {
Fibo[length(Fibo)+1] <- Fibo[length(Fibo)] + Fibo[length(Fibo)-1]
}
Fibo <- Fibo[1:length(Fibo)-1] # last one is over 4e6
Fibo
cat("Sum of even numbers: ", sum(Fibo[Fibo %% 2 ==0]))
A <- matrix(10:21, nrow = 4, ncol = 3, byrow = T)
A
v <- c(1,1,1)
v
matvec.prod <- function (mat, vec) {
if (dim(mat)[2] != length(vec)) {
cat("dimension error")
return(NA)
}
prod <- c()
for (i in 1:dim(mat)[1]) {
prod[i] <- 0
for (j in 1:dim(mat)[2]) {
prod[i] <- prod[i] + mat[i, j]*vec[j]
}
}
return(prod)
}
matvec.prod(A, v)
# MAD
x <- c(3,4,5,2,6,7,8,9)
MAD <- function(x) { median(abs(x - median(x))) }
MAD(x)
MAD(sample(1:100, 1000, replace = T))
Names <- "John Andrew Thomas"
names_split <- strsplit(Names, " ", split = " ")
names_split <- names_split[[1]] # need to unpack list
paste(names_split, "@gmail.com", sep="", collapse=', ')
# "aa" "ba" "ca" "da" "ea" "ab" "bb" "cb" "db" "eb" "ac" "bc" "cc" "dc" "ec" "ad" "bd" "cd" "dd" "ed" "ae" "be" "ce" "de" "ee"
paste0(c("a","b", "c", "d", "e"), rep(c("a","b", "c", "d", "e"), c(5, 5, 5, 5, 5)))
# or
paste0(letters[1:5], rep(letters[1:5], rep(5,5)))
compare <- function(str1, str2) {
if (nchar(str1)==nchar(str2)) {
cat("Equal Length")
} else {
cat("Not Equal Length")
}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
x <- sum(sample(1:6,2))
cat("\nFirst throw = ", x)
if (x %in% c(7, 11)) {
cat("\nyou win")
} else if (x %in% c(2, 3, 12)) {
cat("\nyou lose")
} else {
while (T) {
y <- sum(sample(1:6,2))
cat("\nNext Throw = ", y)
if (y==x) {
cat("\nyou win")
break
}
if (y==7) {
cat("\nyou lose")
break
}
}
}
Fibo = c()
Fibo[1] <- 1
Fibo[2] <- 2
while (Fibo[length(Fibo)] < 4e6) {
Fibo[length(Fibo)+1] <- Fibo[length(Fibo)] + Fibo[length(Fibo)-1]
}
Fibo <- Fibo[1:length(Fibo)-1] # last one is over 4e6
Fibo
cat("Sum of even numbers: ", sum(Fibo[Fibo %% 2 ==0]))
A <- matrix(10:21, nrow = 4, ncol = 3, byrow = T)
A
v <- c(1,1,1)
v
matvec.prod <- function (mat, vec) {
if (dim(mat)[2] != length(vec)) {
cat("dimension error")
return(NA)
}
prod <- c()
for (i in 1:dim(mat)[1]) {
prod[i] <- 0
for (j in 1:dim(mat)[2]) {
prod[i] <- prod[i] + mat[i, j]*vec[j]
}
}
return(prod)
}
matvec.prod(A, v)
# MAD
x <- c(3,4,5,2,6,7,8,9)
MAD <- function(x) { median(abs(x - median(x))) }
MAD(x)
MAD(sample(1:100, 1000, replace = T))
Names <- "John Andrew Thomas"
names_split <- strsplit(Names, " ", split = " ")
names_split <- names_split[[1]] # need to unpack list
paste(names_split, "@gmail.com", sep="", collapse=', ')
# "aa" "ba" "ca" "da" "ea" "ab" "bb" "cb" "db" "eb" "ac" "bc" "cc" "dc" "ec" "ad" "bd" "cd" "dd" "ed" "ae" "be" "ce" "de" "ee"
paste0(c("a","b", "c", "d", "e"), rep(c("a","b", "c", "d", "e"), c(5, 5, 5, 5, 5)))
# or
paste0(letters[1:5], rep(letters[1:5], rep(5,5)))
compare <- function(str1, str2) {
if (nchar(str1)==nchar(str2)) {
cat("Equal Length")
} else {
cat("Not Equal Length")
}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
x <- sum(sample(1:6,2))
cat("\nFirst throw = ", x)
if (x %in% c(7, 11)) {
cat("\nyou win")
} else if (x %in% c(2, 3, 12)) {
cat("\nyou lose")
} else {
while (T) {
y <- sum(sample(1:6,2))
cat("\nNext Throw = ", y)
if (y==x) {
cat("\nyou win")
break
}
if (y==7) {
cat("\nyou lose")
break
}
}
}
help()
c = seq(1,10)
x = 5
x %in% c
vec_1
vec_2
paste(vec_1, vec_2)
shiny::runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Project1')
shiny::runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
library(jqr)
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
remove.packages(geojsonio)
remove.packages('geojsonio')
install.packages('geojsonio')
install.packages("geojsonio")
remove.packages('jqr')
install.packages("jqr")
install.packages("jqr")
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
shiny::runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
shiny::runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
shiny::runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
shiny::runApp('Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1')
getw()
getwd()
setwd("/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1")
setwd("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_1")
ls
shiny::runApp()
library(ggplot2)
library(reshape2)
library(dplyr)
library(data.table)
load("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project 1/Archive/citibike2.rda")
user_summary <- citibike2 %>% group_by (.,month, start_day, usertype) %>% summarise(., num_trips = n()) %>%
filter(., !(usertype =='' & trip_duration <=60))
View(citibike2)
user_summary <- citibike2 %>% group_by (.,month, start_day, usertype) %>% summarise(., num_trips = n()) %>%
filter(., !(usertype =='' & trip_duration >60))
user_summary <- citibike2 %>% filter(., !(usertype =='' & trip_duration >60)) %>%
group_by (.,month, start_day, usertype) %>% summarise(., num_trips = n())
View(user_summary)
user_summary <- citibike2 %>% filter(., !(usertype ==' ' & trip_duration >60)) %>%
group_by (.,month, start_day, usertype) %>% summarise(., num_trips = n())
user_summary[user_summary$usertype =='']
user_summary[user_summary$usertype =='']
user_summary[user_summary$usertype =='',]
user_summary[user_summary$trip_duration >60,]
user_summary <- citibike2 %>% filter(., !(usertype ==' ' & trip_duration >60))
user_summary[user_summary$trip_duration >60,]
user_summary <- citibike2 %>% filter(., (usertype !=' ' & trip_duration <= 60))
user_summary[user_summary$trip_duration >60,]
user_summary <- citibike2 %>% filter(., (usertype !=' ' & trip_duration <= 60)) %>%
group_by (.,month, start_day, usertype) %>% summarise(., num_trips = n())
user_summary[user_summary$trip_duration >60,]
user_summary[user_summary$usertype =='',]
user_summary <- citibike2 %>% filter(., (usertype !='' & trip_duration <= 60)) %>%
group_by (.,month, start_day, usertype) %>% summarise(., num_trips = n())
user_summary[user_summary$usertype =='',]
user_summary[user_summary$usertype =='U',]
user_summary$day_of_week <- weekdays(user_summary$start_day) #add day of week column
user_summary <- user_summary %>% mutate(., weekday_cat =
ifelse(day_of_week %in% c("Saturday", "Sunday"), "Weekend", "Weekday")) #add weekend/weekday
temp_vec <- user_summary %>% group_by(., start_day) %>% summarise(., num_trips = sum(num_trips)) #vector of total trips by day
user_summary <- inner_join(user_summary, temp_vec, by = "start_day") %>% rename(., num_trips = num_trips.x, daily_total = num_trips.y)
week_vec2 = c(rep(0,4), rep(1,14), rep(2,14), rep(3,14), rep(4,14), rep(5,2))
week_vec1 = c(rep(0,2), rep(1,14), rep(2,14), rep(3,14), rep(4,14), rep(5,4))
week_vec = c(week_vec1, week_vec2)
user_summary$week_num <- week_vec
user_summary <- user_summary %>% group_by(., month, week_num, weekday_cat, usertype) %>%
summarise(., num_trips = sum(num_trips), daily_total = sum(daily_total)) %>% filter(., !(week_num %in% c(0,5)))
user_summary <- user_summary %>%mutate(., Percent_of_Trips = round(100*(num_trips/daily_total),0))
filtered_user <- user_summary %>% filter(., usertype == "Customer")
g <- ggplot(filtered_user, aes(x=week_num, y = Percent_of_Trips, fill = as.factor(weekday_cat)))
g <- g + geom_col(aes(fill = weekday_cat),position = "dodge") + facet_wrap(~ month)
g <- g + scale_fill_manual(values=c("red", "blue"), name = "Legend")
g <- g + labs(x = "Week Number", y ="Percent of TotalTrips",
title ="Share of Total Daily Trips by Non-Subscribers") + theme(plot.title = element_text(hjust = 0.5))
g <- ggplot(data = filtered_user, aes(x = week_num, y = Percent_of_Trips, color = weekday_cat))
g1 <- g + geom_line() + facet_wrap( ~ month)
g1
g <- ggplot(filtered_user, aes(x=week_num, y = Percent_of_Trips, fill = as.factor(weekday_cat)))
g <- g + geom_col(aes(fill = weekday_cat),position = "dodge") + facet_wrap(~ month)
g <- g + scale_fill_manual(values=c("red", "blue"), name = "Legend")
g <- g + labs(x = "Week Number", y ="Percent of TotalTrips",
title ="Share of Total Daily Trips by Non-Subscribers") + theme(plot.title = element_text(hjust = 0.5))
g
g <- g + labs(x = "Week Number", y ="Percent of TotalTrips",
title ="Share of Total Daily Trips by Non-Subscribers") +
theme(plot.title = element_text(hjust = 0.5), strip.text.x = element_tex(size = 14))
g <- g + labs(x = "Week Number", y ="Percent of TotalTrips",
title ="Share of Total Daily Trips by Non-Subscribers") +
theme(plot.title = element_text(hjust = 0.5), strip.text.x = element_text(size = 14))
g
View(filtered_user)
runApp()
summary1 <- citibike2 %>% filter(., (usertype !='' & trip_duration <= 60)) %>%
group_by (.,month, start_day) %>% summarise(., num_trips = n())
View(summary1)
day_of_week <- weekdays.Date(summary1$start_day) #create vector of weekdays
weekday_cat <- ifelse(day_of_week %in% c("Saturday", "Sunday"), "Weekend", "Weekday") #column of "weekday" or "weekend"
summary1$day_of_week <- day_of_week
summary1$weekday_cat <- weekday_cat
g <- ggplot(summary1, aes(x = start_day, y = num_trips, group = month))
g2 <- g + geom_line() + theme_bw() + facet_wrap( ~ month, scales = "free_x")
g2 <- g2 + theme(plot.title = element_text(hjust = 0.5)) + labs(x = "Date", y = "Number of Trips") +
ggtitle("Number of Daily Trips Comparison")
week_vec2 = c(rep(0,2), rep(1,7), rep(2,7), rep(3,7), rep(4,7), rep(5,1))
week_vec1 = c(rep(0,1), rep(1,7), rep(2,7), rep(3,7), rep(4,7), rep(5,2))
week_vec = c(week_vec1, week_vec2) #first create column with week# and add to summary1
summary1$week_num <- week_vec
summary2 <- summary1 %>% group_by(., month, week_num, weekday_cat) %>% summarise(., avg_trips = round(mean(num_trips),0)) %>%
filter(., !(week_num %in% c(0,5)))
g <- ggplot(summary2, aes(x=week_num, y = avg_trips, fill = as.factor(weekday_cat)))
g <- g + geom_col(aes(fill = weekday_cat),position = "dodge") + facet_wrap(~ month)
g <- g + scale_fill_manual(values=c("red", "blue"), name = "Legend")
g <- g + labs(x = "Week Number", y ="Avg. Daily Number of Trips",
title ="Avg. Daily Trips: Weekday vs. Weekend") +
theme(plot.title = element_text(hjust = 0.5), strip.text.x = element_text(size = 14))
g
runApp()
runApp()
summary2b <- summary1 %>% group_by(., month, week_num, weekday_cat) %>% summarise(., median_trips = round(median(num_trips),0)) %>%
filter(., !(week_num %in% c(0,5)))
runApp()
runApp()
runApp()
save(user_summary, file = "user_summary.rda")
